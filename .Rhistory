mean((predict.imdb.rf - imdb_test$imdb_score)^2)
varImpPlot(imdb.rf)
caret::confusionMatrix(predict.imdb.rf, imdb_test$imdb_score)
str(predict.imdb.rf)
head(predict.imdb.rf)
caret::confusionMatrix(predict.imdb.rf, as.factor(imdb_test$imdb_score))
caret::confusionMatrix(as.factor(predict.imdb.rf), as.factor(imdb_test$imdb_score))
caret::confusionMatrix(as.factor(imdb_test$imdb_score),as.factor(predict.imdb.rf))
setwd("~/Documents/Github/UberDataAnalysis")
options(digits = 2)
knitr::opts_chunk$set(echo = TRUE , dev = "png", dpi=300)
options(digits = 2)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
library(ggrepel)
library(reshape2)
library(corrgram)
library(tree)
library(rpart)
library(rpart.plot)
library(randomForest)
library(plotly)
library(modelr)
library(caret)
IMDB <- read.csv("IMDM_ratings.csv")
IMDB <- IMDB[!duplicated(IMDB), ]
IMDB <- IMDB[!is.na(IMDB$gross), ]
IMDB <- IMDB[!is.na(IMDB$budget), ]
IMDB <- subset(IMDB, select = -c(aspect_ratio))
IMDB <- subset(IMDB, select = -c(color))
IMDB <- subset(IMDB, select = -c(movie_IMDB_link))
IMDB <- subset(IMDB, select = -c(movie_imdb_link))
IMDB <- subset(IMDB, select = -c(language))
# Cleaning the movie title by removing the special character "Â" at the end and some whitespaces.
IMDB$movie_title <- gsub("Â", "", as.character(factor(IMDB$movie_title)))
clean_title <- str_trim(IMDB$movie_title, side = "right")
# Adding profit and ROI
IMDB <- IMDB %>% mutate(net_profit = gross - budget,return_on_investment = (net_profit/budget)*100)
# replacing all NA's with col average
IMDB$facenumber_in_poster[is.na(IMDB$facenumber_in_poster)] <- round(mean(IMDB$facenumber_in_poster, na.rm = TRUE))
# replacing all 0's with NA's
IMDB[,c(5,6,8,13,24,26)][IMDB[,c(5,6,8,13,24,26)] == 0] <- NA
# replacing all NA's with col average
IMDB$num_critic_for_reviews[is.na(IMDB$num_critic_for_reviews)] <- round(mean(IMDB$num_critic_for_reviews, na.rm = TRUE))
IMDB$duration[is.na(IMDB$duration)] <- round(mean(IMDB$duration, na.rm = TRUE))
IMDB$director_facebook_likes[is.na(IMDB$director_facebook_likes)] <- round(mean(IMDB$director_facebook_likes, na.rm = TRUE))
IMDB$actor_3_facebook_likes[is.na(IMDB$actor_3_facebook_likes)] <- round(mean(IMDB$actor_3_facebook_likes, na.rm = TRUE))
IMDB$actor_1_facebook_likes[is.na(IMDB$actor_1_facebook_likes)] <- round(mean(IMDB$actor_1_facebook_likes, na.rm = TRUE))
IMDB$cast_total_facebook_likes[is.na(IMDB$cast_total_facebook_likes)] <- round(mean(IMDB$cast_total_facebook_likes, na.rm = TRUE))
IMDB$actor_2_facebook_likes[is.na(IMDB$actor_2_facebook_likes)] <- round(mean(IMDB$actor_2_facebook_likes, na.rm = TRUE))
IMDB$movie_facebook_likes[is.na(IMDB$movie_facebook_likes)] <- round(mean(IMDB$movie_facebook_likes, na.rm = TRUE))
# delete the blank cols in content rating as they cannot be replaced with anything reasonable
IMDB <- IMDB[!(IMDB$content_rating %in% ""),]
# replacing all content_rating with mordern rating system
IMDB$content_rating[IMDB$content_rating == 'M']   <- 'PG'
IMDB$content_rating[IMDB$content_rating == 'GP']  <- 'PG'
IMDB$content_rating[IMDB$content_rating == 'X']   <- 'NC-17'
IMDB$content_rating[IMDB$content_rating == 'Approved']  <- 'R'
IMDB$content_rating[IMDB$content_rating == 'Not Rated'] <- 'R'
IMDB$content_rating[IMDB$content_rating == 'Passed']    <- 'R'
IMDB$content_rating[IMDB$content_rating == 'Unrated']   <- 'R'
IMDB$content_rating <- factor(IMDB$content_rating)
levels(IMDB$country) <- c(levels(IMDB$country), "Others")
IMDB$country[(IMDB$country != 'USA')&(IMDB$country != 'UK')] <- 'Others'
IMDB$country <- factor(IMDB$country)
## Data Exploration
After cleaning up the data, we are now left with `r ncol(IMDB)` variables and `r nrow(IMDB)` rows.
ggplot(aes(x=IMDB_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
IMDB %>% group_by(imdb_score) %>% filter(imdb_score > 7.5) %>% count(imdb_score) %>% arrange(desc(n))
## Impact of content rating on IMDB score
Average score for movies by content rating is below 6.6 which is considered a poor IMDB score. As per this distribution, content rating does not have a strong impact on the IMDB score.
Content rating basically tells us about the age group of people who should watch these movies. Content rating does not have strong influence on the IMDB score. However, we can see that most of the content ratings are in the range of
6.5 to 7.5. But, there are some outlier categories which are beyond this range. So, it means there is a possibility that these ratings are coming from different age groups but we cannot confirm this certainly with this data. R and PG-13 have the most number of movies which indicates most of the movies are not for under age people. What makes it more interesting is the IMDB score of these movies are also very poor and below average. To summarize, a big chunk of the movies are the restricted ones with poor IMDB score.
```{r content_rating chart, warning=FALSE, echo=FALSE,out.width="75%"}
rating_IMDB <- IMDB %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n())
ggplot(aes(x=average_imdb_score, y = num, label = content_rating),data = rating_IMDB) +
geom_point(color="#DAA520") +
geom_label_repel() +
ggtitle("Average IMDB Score by Rating") +
labs(x = "Average IMDB Score", y = "Count of Movies")
IMDB.directors <- data.frame (IMDB %>%
group_by(director_name) %>%
summarise(count = n())%>%
filter(count >10, count <50))
ggplot(aes(x = director_name, y = count), data = IMDB.directors)+
geom_jitter(color="#DAA520") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Directors Distribution on Movies",x="Directors",y="Count of Movies")
avg_score_per_director <- data.frame (IMDB %>%
group_by(director_name) %>%
mutate(count = n(),average_imdb_score = mean(imdb_score))%>%
filter(count >14, count <50))
ggplot(aes(x = director_name, y = average_imdb_score), data = avg_score_per_director)+
geom_point(color="#DAA520") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Average IMDB Score by Director",x="Directors",y="Average IMDB Score")
director_group <- group_by(IMDB, director_name, num_user_for_reviews)
movie_by_director <- summarise(director_group,
mean_score = mean(imdb_score))
movie_by_director <- movie_by_director[67:4530,]
movie_by_director <- movie_by_director[with(movie_by_director, order(-mean_score)), ]
movie_by_director <- head(movie_by_director, 20)
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews, fill="#f3ce13"), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & Scores') +
scale_color_gradient(low = "yellow", high = "gold4")
```{r user reviews, warning=FALSE, echo=FALSE, out.width="75%"}
user <- filter(IMDB,num_user_for_reviews <= 3000)
ggplot(data = user, mapping = aes(x = imdb_score, y = num_user_for_reviews)) + geom_point(color="#DAA520") + facet_wrap( ~ country)+
xlab("IMDB Score") +
ylab("Number of User Reviews")+ theme_minimal() + ggtitle('Number of User Reviews by Country')
ggplot(IMDB, aes(x =imdb_score, y =duration,colour = factor(imdb_score)))+
geom_point() +
labs(title = "Movie Duration and IMDB score",
x = "IMDB Score", y = "Duration")
ggplot(aes(x = imdb_score, y=net_profit/1000000 ), data = subset(IMDB, net_profit > 1, !is.na(net_profit))) +
geom_jitter(shape = 21, fill = '#f3ce13') +
geom_smooth() +
labs(title = "Net Profit and IMDB score",
x = " IMDB Score", y = "Net Profit in $ Million")
IMDB_train_indices <- sample(1:nrow(IMDB),0.8*nrow(IMDB))
IMDB_train <- IMDB %>% slice(IMDB_train_indices)
IMDB_test <- IMDB %>% slice(-IMDB_train_indices)
IMDB_mod_1 = lm (imdb_score~ duration + num_voted_users + num_critic_for_reviews + movie_facebook_likes,data=IMDB_train)
summary(IMDB_mod_1)
rmse(IMDB_mod_1, IMDB_test)
IMDB_rf <-  randomForest(imdb_score ~ ., data=IMDB_train,ntree = 500, importance = TRUE, do.trace = 50)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'IncNodePurity'],2))
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'IncNodePurity'],2))
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity', fill = "#DAA520") +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'black') +
labs(x = 'Variables') +
coord_flip() + labs(title = "Variables by importance",
x = "Importance", y = "Variables")
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
importance <- importance(IMDB_rf)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'IncNodePurity'],2))
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity', fill = "#DAA520") +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'black') +
labs(x = 'Variables') +
coord_flip() + labs(title = "Variables by importance",
x = "Importance", y = "Variables")
# Predicting using the new model
predicted.rf = predict(IMDB_rf,IMDB_test)
# Calculating the root mean squared error
sqrt((sum((IMDB_test$imdb_score - predicted.rf)^2))/ nrow(IMDB_test))
#MSE
mean((predicted.rf - IMDB_test$imdb_score)^2)
IMDB.rf <- randomForest(imdb_score~num_critic_for_reviews + duration + director_facebook_likes + actor_3_facebook_likes + actor_1_facebook_likes + gross + num_voted_users + cast_total_facebook_likes  + num_user_for_reviews + budget + title_year + actor_2_facebook_likes + movie_facebook_likes, data = IMDB_train, mtry = 5)
#predict on test set
predict.IMDB.rf <- predict(IMDB.rf, IMDB_test)
#RMSE
sqrt((sum((IMDB_test$imdb_score - predict.IMDB.rf)^2))/ nrow(IMDB_test))
#MSE
mean((predict.IMDB.rf - IMDB_test$imdb_score)^2)
varImpPlot(IMDB.rf)
knitr::opts_chunk$set(echo = TRUE , dev = "png", dpi=300)
options(digits = 2)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
library(ggrepel)
library(reshape2)
library(corrgram)
library(tree)
library(rpart)
library(rpart.plot)
library(randomForest)
library(plotly)
library(modelr)
library(caret)
IMDB <- read.csv("IMDM_ratings.csv")
IMDB <- IMDB[!duplicated(IMDB), ]
IMDB <- IMDB[!is.na(IMDB$gross), ]
IMDB <- IMDB[!is.na(IMDB$budget), ]
IMDB <- subset(IMDB, select = -c(aspect_ratio))
IMDB <- subset(IMDB, select = -c(color))
IMDB <- subset(IMDB, select = -c(movie_imdb_link))
IMDB <- subset(IMDB, select = -c(language))
# Cleaning the movie title by removing the special character "Â" at the end and some whitespaces.
IMDB$movie_title <- gsub("Â", "", as.character(factor(IMDB$movie_title)))
clean_title <- str_trim(IMDB$movie_title, side = "right")
# Adding profit and ROI
IMDB <- IMDB %>% mutate(net_profit = gross - budget,return_on_investment = (net_profit/budget)*100)
# replacing all NA's with col average
IMDB$facenumber_in_poster[is.na(IMDB$facenumber_in_poster)] <- round(mean(IMDB$facenumber_in_poster, na.rm = TRUE))
# replacing all 0's with NA's
IMDB[,c(5,6,8,13,24,26)][IMDB[,c(5,6,8,13,24,26)] == 0] <- NA
# replacing all NA's with col average
IMDB$num_critic_for_reviews[is.na(IMDB$num_critic_for_reviews)] <- round(mean(IMDB$num_critic_for_reviews, na.rm = TRUE))
IMDB$duration[is.na(IMDB$duration)] <- round(mean(IMDB$duration, na.rm = TRUE))
IMDB$director_facebook_likes[is.na(IMDB$director_facebook_likes)] <- round(mean(IMDB$director_facebook_likes, na.rm = TRUE))
IMDB$actor_3_facebook_likes[is.na(IMDB$actor_3_facebook_likes)] <- round(mean(IMDB$actor_3_facebook_likes, na.rm = TRUE))
IMDB$actor_1_facebook_likes[is.na(IMDB$actor_1_facebook_likes)] <- round(mean(IMDB$actor_1_facebook_likes, na.rm = TRUE))
IMDB$cast_total_facebook_likes[is.na(IMDB$cast_total_facebook_likes)] <- round(mean(IMDB$cast_total_facebook_likes, na.rm = TRUE))
IMDB$actor_2_facebook_likes[is.na(IMDB$actor_2_facebook_likes)] <- round(mean(IMDB$actor_2_facebook_likes, na.rm = TRUE))
IMDB$movie_facebook_likes[is.na(IMDB$movie_facebook_likes)] <- round(mean(IMDB$movie_facebook_likes, na.rm = TRUE))
# delete the blank cols in content rating as they cannot be replaced with anything reasonable
IMDB <- IMDB[!(IMDB$content_rating %in% ""),]
# replacing all content_rating with mordern rating system
IMDB$content_rating[IMDB$content_rating == 'M']   <- 'PG'
IMDB$content_rating[IMDB$content_rating == 'GP']  <- 'PG'
IMDB$content_rating[IMDB$content_rating == 'X']   <- 'NC-17'
IMDB$content_rating[IMDB$content_rating == 'Approved']  <- 'R'
IMDB$content_rating[IMDB$content_rating == 'Not Rated'] <- 'R'
IMDB$content_rating[IMDB$content_rating == 'Passed']    <- 'R'
IMDB$content_rating[IMDB$content_rating == 'Unrated']   <- 'R'
IMDB$content_rating <- factor(IMDB$content_rating)
levels(IMDB$country) <- c(levels(IMDB$country), "Others")
IMDB$country[(IMDB$country != 'USA')&(IMDB$country != 'UK')] <- 'Others'
IMDB$country <- factor(IMDB$country)
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
IMDB %>% group_by(imdb_score) %>% filter(imdb_score > 7.5) %>% count(imdb_score) %>% arrange(desc(n))
rating_IMDB <- IMDB %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n())
ggplot(aes(x=average_imdb_score, y = num, label = content_rating),data = rating_IMDB) +
geom_point(color="#DAA520") +
geom_label_repel() +
ggtitle("Average IMDB Score by Rating") +
labs(x = "Average IMDB Score", y = "Count of Movies")
IMDB.directors <- data.frame (IMDB %>%
group_by(director_name) %>%
summarise(count = n())%>%
filter(count >10, count <50))
ggplot(aes(x = director_name, y = count), data = IMDB.directors)+
geom_jitter(color="#DAA520") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Directors Distribution on Movies",x="Directors",y="Count of Movies")
avg_score_per_director <- data.frame (IMDB %>%
group_by(director_name) %>%
mutate(count = n(),average_imdb_score = mean(imdb_score))%>%
filter(count >14, count <50))
ggplot(aes(x = director_name, y = average_imdb_score), data = avg_score_per_director)+
geom_point(color="#DAA520") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Average IMDB Score by Director",x="Directors",y="Average IMDB Score")
director_group <- group_by(IMDB, director_name, num_user_for_reviews)
movie_by_director <- summarise(director_group,
mean_score = mean(imdb_score))
movie_by_director <- movie_by_director[67:4530,]
movie_by_director <- movie_by_director[with(movie_by_director, order(-mean_score)), ]
movie_by_director <- head(movie_by_director, 20)
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews, fill="#f3ce13"), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & Scores') +
scale_color_gradient(low = "yellow", high = "gold4")
user <- filter(IMDB,num_user_for_reviews <= 3000)
ggplot(data = user, mapping = aes(x = imdb_score, y = num_user_for_reviews)) + geom_point(color="#DAA520") + facet_wrap( ~ country)+
xlab("IMDB Score") +
ylab("Number of User Reviews")+ theme_minimal() + ggtitle('Number of User Reviews by Country')
ggplot(IMDB, aes(x =imdb_score, y =duration,colour = factor(imdb_score)))+
geom_point() +
labs(title = "Movie Duration and IMDB score",
x = "IMDB Score", y = "Duration")
ggplot(aes(x = imdb_score, y=net_profit/1000000 ), data = subset(IMDB, net_profit > 1, !is.na(net_profit))) +
geom_jitter(shape = 21, fill = '#f3ce13') +
geom_smooth() +
labs(title = "Net Profit and IMDB score",
x = " IMDB Score", y = "Net Profit in $ Million")
IMDB_train_indices <- sample(1:nrow(IMDB),0.8*nrow(IMDB))
IMDB_train <- IMDB %>% slice(IMDB_train_indices)
IMDB_test <- IMDB %>% slice(-IMDB_train_indices)
# How is IMDB score related to the num of voted users compared to duration
IMDB_mod_1 = lm (imdb_score~ duration + num_voted_users + num_critic_for_reviews + movie_facebook_likes,data=IMDB_train)
summary(IMDB_mod_1)
rmse(IMDB_mod_1, IMDB_test)
IMDB_rf <-  randomForest(imdb_score ~ ., data=IMDB_train,ntree = 500, importance = TRUE, do.trace = 50)
importance <- importance(IMDB_rf)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'IncNodePurity'],2))
# Create a rank variable based on importance
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity', fill = "#DAA520") +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'black') +
labs(x = 'Variables') +
coord_flip() + labs(title = "Variables by importance",
x = "Importance", y = "Variables")
# Predicting using the new model
predicted.rf = predict(IMDB_rf,IMDB_test)
# Calculating the root mean squared error
sqrt((sum((IMDB_test$imdb_score - predicted.rf)^2))/ nrow(IMDB_test))
#MSE
mean((predicted.rf - IMDB_test$imdb_score)^2)
IMDB.rf <- randomForest(imdb_score~num_critic_for_reviews + duration + director_facebook_likes + actor_3_facebook_likes + actor_1_facebook_likes + gross + num_voted_users + cast_total_facebook_likes  + num_user_for_reviews + budget + title_year + actor_2_facebook_likes + movie_facebook_likes, data = IMDB_train, mtry = 5)
#predict on test set
predict.IMDB.rf <- predict(IMDB.rf, IMDB_test)
#RMSE
sqrt((sum((IMDB_test$imdb_score - predict.IMDB.rf)^2))/ nrow(IMDB_test))
#MSE
mean((predict.IMDB.rf - IMDB_test$imdb_score)^2)
varImpPlot(IMDB.rf)
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
stat_function(fun = dnorm) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
stat_function(fun = dnorm,colour = "red") +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
stat_function(fun = dnorm,colour = "red",arg = list(mean = mean(count(imdb_score)$imdb_score, na.rm = TRUE),
sd = sd(count(imdb_score)$imdb_score, na.rm = TRUE))) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
stat_function(fun = dnorm,colour = "red",arg = list(mean = mean(imdb_score, na.rm = TRUE),
sd = sd(imdb_score, na.rm = TRUE))) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
stat_function(fun = dnorm,colour = "red",arg = list(mean = mean(count$imdb_score),sd = sd(count$imdb_score))) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
geom_line(aes(y = y)) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
stat_function(fun = function(x) dnorm(x, mean = mean, sd = sd) * n * binwidth,
color = "darkred", size = 1) +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score,mean = mean, sd = sd, binwidth = binwidth, n = n), data = IMDB) +
theme_bw() +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
stat_function(fun = function(x) dnorm(x, mean = mean, sd = sd) * n * binwidth,
color = "darkred", size = 1) +
labs(x = "IMDB Score", y = "Count of Movies")
n = 1000
mean = 0
sd = 1
binwidth = 0.3
set.seed(1)
ggplot(aes(x=imdb_score,mean = mean, sd = sd, binwidth = binwidth, n = n), data = IMDB) +
theme_bw() +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
stat_function(fun = function(x) dnorm(x, mean = mean, sd = sd) * n * binwidth,
color = "darkred", size = 1) +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = IMDB) +
theme_bw() +
geom_histogram(binwidth = 0.2,aes(fill = ..count..),colour="white",fill="#DAA520") +
scale_x_continuous(breaks = 0:10) +
ggtitle("IMDB Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=average_imdb_score, y = num, label = content_rating),data = rating_IMDB) +
geom_point(color="#DAA520") +
geom_label_repel() +
theme_bw() +
ggtitle("Average IMDB Score by Rating") +
labs(x = "Average IMDB Score", y = "Count of Movies")
ggplot(aes(x = director_name, y = count), data = IMDB.directors)+
geom_jitter(color="#DAA520") +
theme_bw() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Directors Distribution on Movies",x="Directors",y="Count of Movies")
ggplot(aes(x = director_name, y = average_imdb_score), data = avg_score_per_director)+
geom_point(color="#DAA520") +
theme_bw() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Average IMDB Score by Director",x="Directors",y="Average IMDB Score")
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews, fill="#f3ce13"), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & Scores') +
scale_color_gradient(low = "yellow", high = "gold4") +
theme_bw() +
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews, fill="#f3ce13"), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & Scores') +
scale_color_gradient(low = "yellow", high = "gold4") +theme_bw()
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews, fill="#f3ce13"), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & Scores') +
scale_color_gradient(low = "yellow", high = "gold4")
ggplot(data = user, mapping = aes(x = imdb_score, y = num_user_for_reviews)) + geom_point(color="#DAA520") + facet_wrap( ~ country)+
xlab("IMDB Score") +
ylab("Number of User Reviews")+ theme_minimal() + ggtitle('Number of User Reviews by Country')
ggplot(data = user, mapping = aes(x = imdb_score, y = num_user_for_reviews)) + geom_point(color="#DAA520") + facet_wrap( ~ country)+
xlab("IMDB Score") +
ylab("Number of User Reviews")+ theme_minimal() + ggtitle('Number of User Reviews by Country') + theme_bw()
ggplot(IMDB, aes(x =imdb_score, y =duration,colour = factor(imdb_score)))+
geom_point() +
labs(title = "Movie Duration and IMDB score",
x = "IMDB Score", y = "Duration")
ggplot(IMDB, aes(x =imdb_score, y =duration,colour = factor(imdb_score)))+
geom_point() +
labs(title = "Movie Duration and IMDB score",
x = "IMDB Score", y = "Duration") + theme_bw()
ggplot(aes(x = imdb_score, y=net_profit/1000000 ), data = subset(IMDB, net_profit > 1, !is.na(net_profit))) +
geom_jitter(shape = 21, fill = '#f3ce13') +
geom_smooth() +
labs(title = "Net Profit and IMDB score",
x = " IMDB Score", y = "Net Profit in $ Million") +theme_bw()
# Use ggplot2 to visualize the relative importance of variables
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity', fill = "#DAA520") +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'black') +
labs(x = 'Variables') +
coord_flip() + labs(title = "Variables by importance",
x = "Importance", y = "Variables") + theme_bw()
5/3806
8/3806
mean(imdb$imdb_score)
ColMeans(imdb$imdb_score)
mean(IMDB$imdb_score)
unique(IMDB$content_rating)
length(IMDB$content_rating)
length(IMDB$content_rating[IMDB$content_rating==R])
length(IMDB$content_rating[IMDB$content_rating=='R'])
length(IMDB$content_rating[IMDB$content_rating=='G'])
length(IMDB$content_rating[IMDB$content_rating=='PG-13'])
length(IMDB$content_rating[IMDB$content_rating=='PG'])
length(IMDB$content_rating[IMDB$content_rating=='NC-17'])
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & Scores') +
scale_color_gradient(low = "yellow", high = "gold4")
director_group <- group_by(IMDB, director_name, num_user_for_reviews)
movie_by_director <- summarise(director_group,
mean_score = mean(imdb_score))
##movie_by_director <- movie_by_director[67:4530,]
movie_by_director <- movie_by_director[with(movie_by_director, order(-mean_score)), ]
movie_by_director <- head(movie_by_director, 20)
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & Scores') +
scale_color_gradient(low = "yellow", high = "gold4")
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & IMDB Scores') +
scale_color_gradient(low = "yellow", high = "gold4")
ggplot(aes(x = mean_score, y = director_name), data = movie_by_director) +
geom_point(aes(color = num_user_for_reviews), size = 2) + xlab("Average IMDB Score") +
ylab("Director Name")+ theme_minimal() + ggtitle('Director, User Reviews & IMDB Score') +
scale_color_gradient(low = "yellow", high = "gold4")
sapply(IMDB$num_user_for_reviews, summary)
summary(IMDB$num_user_for_reviews)
