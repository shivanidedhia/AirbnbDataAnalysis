rmse(regression_mod,diamonds2_test) ## ~ 828.63
# 3)
# As the model gets more complicated the rmse increases because it is overfitting
rmse(regression_mod,diamonds_test) ## ~ 828.63
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
library(ggrepel)
IMDB <- read.csv("IMDM_ratings.csv")
setwd("~/Documents/Github/UberDataAnalysis")
IMDB <- read.csv("IMDM_ratings.csv")
sum(duplicated(IMDB))
imdb <- IMDB[!duplicated(IMDB), ]
str(imdb)
dim(imdb)
# What are the missing values?
colSums(sapply(imdb, is.na))
# cleaning the movie title
imdb$movie_title <- gsub("Ã‚", "", as.character(factor(imdb$movie_title)))
str_trim(imdb$movie_title, side = "right")
# Gross and Budget have many missing NA's as we would use these rows.
# We will remove the rows with NA's to make it optimal.
imdb <- imdb[!is.na(imdb$gross), ]
imdb <- imdb[!is.na(imdb$budget), ]
# Aspect Ratio has some missing values, which will not be important for our analysis.
imdb <- subset(imdb, select = -c(aspect_ratio))
imdb <- subset(imdb, select = -c(color))
## U.K , France and Canada had highest IMDB Average Rating
# Is language in this dataset?
table(imdb$language)
# Since most movies are in English, we can remove language.
imdb <- subset(imdb, select = -c(language))
# Adding Profit and ROI %
imdb <- imdb %>% mutate(net_profit = gross - budget,return_on_investment = (net_profit/budget)*100)
# replacing all NA's with col average
imdb$facenumber_in_poster[is.na(imdb$facenumber_in_poster)] <- round(mean(imdb$facenumber_in_poster, na.rm = TRUE))
# replacing all 0's with NA's
imdb[,c(5,6,8,13,24,26)][imdb[,c(5,6,8,13,24,26)] == 0] <- NA
# replacing all NA's with col average
imdb$num_critic_for_reviews[is.na(imdb$num_critic_for_reviews)] <- round(mean(imdb$num_critic_for_reviews, na.rm = TRUE))
imdb$duration[is.na(imdb$duration)] <- round(mean(imdb$duration, na.rm = TRUE))
imdb$director_facebook_likes[is.na(imdb$director_facebook_likes)] <- round(mean(imdb$director_facebook_likes, na.rm = TRUE))
imdb$actor_3_facebook_likes[is.na(imdb$actor_3_facebook_likes)] <- round(mean(imdb$actor_3_facebook_likes, na.rm = TRUE))
imdb$actor_1_facebook_likes[is.na(imdb$actor_1_facebook_likes)] <- round(mean(imdb$actor_1_facebook_likes, na.rm = TRUE))
imdb$cast_total_facebook_likes[is.na(imdb$cast_total_facebook_likes)] <- round(mean(imdb$cast_total_facebook_likes, na.rm = TRUE))
imdb$actor_2_facebook_likes[is.na(imdb$actor_2_facebook_likes)] <- round(mean(imdb$actor_2_facebook_likes, na.rm = TRUE))
imdb$movie_facebook_likes[is.na(imdb$movie_facebook_likes)] <- round(mean(imdb$movie_facebook_likes, na.rm = TRUE))
# delete the blank cols in content rating as they cannot be replaced with anything reasonable
imdb <- imdb[!(imdb$content_rating %in% ""),]
view(imdb)
# replacing all content_rating with mordern rating system
imdb$content_rating[imdb$content_rating == 'M']   <- 'PG'
imdb$content_rating[imdb$content_rating == 'GP']  <- 'PG'
imdb$content_rating[imdb$content_rating == 'X']   <- 'NC-17'
imdb$content_rating[imdb$content_rating == 'Approved']  <- 'R'
imdb$content_rating[imdb$content_rating == 'Not Rated'] <- 'R'
imdb$content_rating[imdb$content_rating == 'Passed']    <- 'R'
imdb$content_rating[imdb$content_rating == 'Unrated']   <- 'R'
imdb$content_rating <- factor(imdb$content_rating)
levels(imdb$country) <- c(levels(imdb$country), "Others")
imdb$country[(imdb$country != 'USA')&(imdb$country != 'UK')] <- 'Others'
imdb$country <- factor(imdb$country)
table(imdb$country)
# Data Visualizing
## Add legend if needed
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(net_profit)) %>%
top_n(10, net_profit) %>%
ggplot(aes(x=budget/1000000, y=net_profit/1000000)) +
geom_point() +
geom_smooth() +
geom_text_repel(aes(label=movie_title)) +
labs(x = "Budget in million", y = "Profit in million", title = "Budget of the top 10 profitable movies between 2000 - 2016") +
theme(plot.title = element_text(hjust = 0.2))
# facet wrap
# change the budget x=budget/1000000
library(reshape2)
library(corrgram)
ggplot(data = melt(imdb), mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')
# imdb score count
ggplot(imdb, aes(x= imdb_score)) + geom_bar()
#################   Akhila  ############################
#
imdb <- imdb[!is.na(imdb$num_user_for_reviews),]
imdb$num_user_reviews<-cut(imdb$num_user_for_reviews,breaks = c(0,107,208,333,397,5100), labels = c("very few","few","middle","high","very high"))
summary(imdb$num_user_reviews)
ggplot(imdb, aes(x =imdb_score, y =duration))+
geom_point(size=2, aes(colour=num_user_reviews)) +
labs(title = "Movie Duration comapred to the IMDB score",
x = "IMDB Score", y = "Duration")
# The higher the duration, the more the rating.
# Looks like duration of the movie also factors into the ratings of the movie.
# Most movies in this data set are under 150 mins and have recieved IMDB score between 5-8.
# Few movies beyond 250 mins have a score higher than 5.5.
#  Movies above 300 mins have few reviews but higher reviews.
# Less number of people watched movies longer than 300 mins, hence higher reviews.
# movie duration must be under ~ 175 mins to recieve many reviews and a higher IMDB score
# 2nd
ggplot(aes(x = title_year, y = imdb_score), data = imdb) +
geom_point(alpha = 1/10) + geom_smooth(method = "auto")
# Older movies have a higher rating compared to new movies. They also have few reviews.
# geom_point(alpha = 0.05)
########################## Shivani #################################
library(tree)
library(rpart)
library(rpart.plot)
# Splitting the data into test and train
imdb_train_indices <- sample(1:nrow(imdb),0.8*nrow(imdb))
imdb_train <- imdb %>% slice(imdb_train_indices)
imdb_test <- imdb %>% slice(-imdb_train_indices)
# How is imdb score related to the num of voted users compared to duration
imdb_mod_1 = lm(imdb_score~num_voted_users+duration,data=imdb_train)
summary(imdb_mod_1)
# R-squared for this model is 0.2797 which is extremely poor,
# this shows that imdb score is not highly corelated to number of votes or duration
# there is not a linenar relationship among the imdb score ~ num_user_review and duration
set.seed(3)
imdb_rpart <- rpart(imdb_score~.,data=imdb_train)
summary(imdb_rpart)
rpart.plot(imdb_rpart,digits = 3)
view(imdb)
imdb <- subset(imdb, select = -c(momvie_imdb_link))
str(imdb)
imdb <- subset(imdb, select = -c(movie_imdb_link))
str(imdb)
# R-squared for this model is 0.2797 which is extremely poor,
# this shows that imdb score is not highly corelated to number of votes or duration
# there is not a linenar relationship among the imdb score ~ num_user_review and duration
set.seed(3)
imdb_rpart <- rpart(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget,data=imdb_train)
summary(imdb_rpart)
rpart.plot(imdb_rpart,digits = 3)
library(randomForest)
imdb_rf <- randomForest(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget,data= imdb_train ,
ntree = 100,
control = rpart.control(cp = 0.001),do.trace = 50)
imdb_rf
imdb_rf <- randomForest(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget,data= imdb_train ,
ntree = 500,
control = rpart.control(cp = 0.001),do.trace = 50)
imdb_rf
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
imdb.directors <- data.frame (imdb %>%
group_by(director_name) %>%
summarise(count = n())%>%
filter(count >10, count <50))
ggplot(aes(x = director_name, y = count), data = imdb.directors)+
geom_jitter() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Directors Distribution on Movies",x="Count of Movies",y="Directors")
# content rating distribution
ggplot(aes(x = content_rating), data= subset(mmd, !is.na(content_rating))) +
geom_bar(aes(fill = ..count..)) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Content Rating Distribution ",x="Count of Movies",y="Content Rating")
# content rating distribution
ggplot(aes(x = content_rating), data= subset(imdb, !is.na(content_rating))) +
geom_bar(aes(fill = ..count..)) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Content Rating Distribution ",x="Count of Movies",y="Content Rating")
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
# Grouping directors with movies greater than 10 and less than 50.
# The highest number of movies per director is 25.
imdb.directors <- data.frame (imdb %>%
group_by(director_name) %>%
summarise(count = n())%>%
filter(count >10, count <50))
ggplot(aes(x = director_name, y = count), data = imdb.directors)+
geom_jitter() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Directors Distribution on Movies",x="Count of Movies",y="Directors")
# content rating distribution
# Movies rated R are the most in the dataset
ggplot(aes(x = content_rating), data= subset(imdb, !is.na(content_rating))) +
geom_bar(aes(fill = ..count..)) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
labs(title="Content Rating Distribution ",x="Count of Movies",y="Content Rating")
str(imdb)
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(net_profit)) %>%
top_n(10, net_profit) %>%
ggplot(aes(x=budget/1000000, y=net_profit/1000000)) +
geom_point() +
geom_smooth() +
geom_text_repel(aes(label=movie_title)) +
labs(x = "Budget in million", y = "Profit in million", title = "Budget of the top 10 profitable movies between 2000 - 2016") +
theme(plot.title = element_text(hjust = 0.2))
imdb_mod_1 = lm(imdb_score~num_voted_users+duration,data=imdb_train)
summary(imdb_mod_1)
imdb_rpart <- rpart(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget,data=imdb_train)
summary(imdb_rpart)
rpart.plot(imdb_rpart,digits = 3)
imdb_rpart <- rpart(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget + actor_1_name + actor_2_name + actor_3_name,data=imdb_train)
summary(imdb_rpart)
rpart.plot(imdb_rpart,digits = 3)
imdb_rpart <- rpart(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget + actor_1_name,data=imdb_train)
summary(imdb_rpart)
rpart.plot(imdb_rpart,digits = 3)
imdb_rpart <- rpart(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews ,data=imdb_train)
summary(imdb_rpart)
rpart.plot(imdb_rpart,digits = 3)
library(randomForest)
imdb_rf <- randomForest(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget,data= imdb_train ,
ntree = 500,
control = rpart.control(cp = 0.001),do.trace = 50)
ggplot(imdb, aes(x= imdb_score)) + geom_bar()
#
imdb <- imdb[!is.na(imdb$num_user_for_reviews),]
imdb$num_user_reviews<-cut(imdb$num_user_for_reviews,breaks = c(0,107,208,333,397,5100), labels = c("very few","few","middle","high","very high"))
summary(imdb$num_user_reviews)
ggplot(imdb, aes(x =imdb_score, y =duration))+
geom_point(size=2, aes(colour=num_user_reviews)) +
labs(title = "Movie Duration comapred to the IMDB score",
x = "IMDB Score", y = "Duration")
# imdb score count
ggplot(imdb, aes(x= imdb_score)) + geom_bar()
imdb <- imdb[!is.na(imdb$num_user_for_reviews),]
imdb$num_user_reviews<-cut(imdb$num_user_for_reviews,breaks = c(0,107,208,333,397,5100), labels = c("very few","few","middle","high","very high"))
summary(imdb$num_user_reviews)
ggplot(imdb, aes(x =imdb_score, y =duration))+
geom_point(size=2, aes(colour=num_user_reviews)) +
labs(title = "Movie Duration comapred to the IMDB score",
x = "IMDB Score", y = "Duration")
# 2nd
ggplot(aes(x = title_year, y = imdb_score), data = imdb) +
geom_point(alpha = 1/10) + geom_smooth(method = "auto")
ggplot(imdb, aes(x =imdb_score, y =duration))+
geom_point(size=2, aes(colour=num_user_reviews)) +
labs(title = "Movie Duration comapred to the IMDB score",
x = "IMDB Score", y = "Duration")
ggplot(imdb, aes(x =imdb_score, y =duration))+
geom_point(alpha = 1/10 ,size=2, aes(colour=num_user_reviews)) +
labs(title = "Movie Duration comapred to the IMDB score",
x = "IMDB Score", y = "Duration")
ggplot(imdb, aes(x =imdb_score, y =duration))+
geom_point(alpha = 1 ,size=2, aes(colour=num_user_reviews)) +
labs(title = "Movie Duration comapred to the IMDB score",
x = "IMDB Score", y = "Duration")
imdb_mod_1 = lm(imdb_score~num_voted_users+duration,data=imdb_train)
summary(imdb_mod_1)
imdb_rpart <- rpart(imdb_score ~ num_critic_for_reviews + duration + num_user_reviews +  budget,data=imdb_train)
summary(imdb_rpart)
str(imdb)
unlink('IMDB_cache', recursive = TRUE)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE , dev = "png", dpi=300)
options(digits = 2)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
library(ggrepel)
library(reshape2)
library(corrgram)
library(tree)
library(rpart)
library(rpart.plot)
library(randomForest)
library(plotly)
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
library(ggrepel)
library(reshape2)
library(corrgram)
library(tree)
library(rpart)
library(rpart.plot)
library(randomForest)
library(plotly)
setwd("~/")
setwd("~/Documents/Github/UberDataAnalysis")
IMDB <- read.csv("IMDM_ratings.csv")
sum(duplicated(IMDB))
imdb <- IMDB[!duplicated(IMDB), ]
imdb <- imdb[!is.na(imdb$gross), ]
imdb <- imdb[!is.na(imdb$budget), ]
imdb <- subset(imdb, select = -c(aspect_ratio))
imdb <- subset(imdb, select = -c(color))
imdb <- subset(imdb, select = -c(movie_imdb_link))
imdb <- subset(imdb, select = -c(language))
# Cleaning the movie title by removing the special character "Ã‚" at the end and some whitespaces.
imdb$movie_title <- gsub("Ã‚", "", as.character(factor(imdb$movie_title)))
str_trim(imdb$movie_title, side = "right")
# Adding profit and ROI
imdb <- imdb %>% mutate(net_profit = gross - budget,return_on_investment = (net_profit/budget)*100)
# replacing all NA's with col average
imdb$facenumber_in_poster[is.na(imdb$facenumber_in_poster)] <- round(mean(imdb$facenumber_in_poster, na.rm = TRUE))
# replacing all 0's with NA's
imdb[,c(5,6,8,13,24,26)][imdb[,c(5,6,8,13,24,26)] == 0] <- NA
# replacing all NA's with col average
imdb$num_critic_for_reviews[is.na(imdb$num_critic_for_reviews)] <- round(mean(imdb$num_critic_for_reviews, na.rm = TRUE))
imdb$duration[is.na(imdb$duration)] <- round(mean(imdb$duration, na.rm = TRUE))
imdb$director_facebook_likes[is.na(imdb$director_facebook_likes)] <- round(mean(imdb$director_facebook_likes, na.rm = TRUE))
imdb$actor_3_facebook_likes[is.na(imdb$actor_3_facebook_likes)] <- round(mean(imdb$actor_3_facebook_likes, na.rm = TRUE))
imdb$actor_1_facebook_likes[is.na(imdb$actor_1_facebook_likes)] <- round(mean(imdb$actor_1_facebook_likes, na.rm = TRUE))
imdb$cast_total_facebook_likes[is.na(imdb$cast_total_facebook_likes)] <- round(mean(imdb$cast_total_facebook_likes, na.rm = TRUE))
imdb$actor_2_facebook_likes[is.na(imdb$actor_2_facebook_likes)] <- round(mean(imdb$actor_2_facebook_likes, na.rm = TRUE))
imdb$movie_facebook_likes[is.na(imdb$movie_facebook_likes)] <- round(mean(imdb$movie_facebook_likes, na.rm = TRUE))
# delete the blank cols in content rating as they cannot be replaced with anything reasonable
imdb <- imdb[!(imdb$content_rating %in% ""),]
# replacing all content_rating with mordern rating system
imdb$content_rating[imdb$content_rating == 'M']   <- 'PG'
imdb$content_rating[imdb$content_rating == 'GP']  <- 'PG'
imdb$content_rating[imdb$content_rating == 'X']   <- 'NC-17'
imdb$content_rating[imdb$content_rating == 'Approved']  <- 'R'
imdb$content_rating[imdb$content_rating == 'Not Rated'] <- 'R'
imdb$content_rating[imdb$content_rating == 'Passed']    <- 'R'
imdb$content_rating[imdb$content_rating == 'Unrated']   <- 'R'
imdb$content_rating <- factor(imdb$content_rating)
levels(imdb$country) <- c(levels(imdb$country), "Others")
imdb$country[(imdb$country != 'USA')&(imdb$country != 'UK')] <- 'Others'
imdb$country <- factor(imdb$country)
table(imdb$country)
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "IMDB Score", y = "Count of Movies")
count(imdb_score)
summmary(imdb_score)
library(tidyverse)
summmary(imdb$imdb_score)
imdb$imdb_score
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.1) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
imdb$imdb_score.mean()
table(imdb$country)
table(imdb$imdb_score)
column.summary(imdb)
column.summary(imdb)
imdb %>% group_by(imdb_score) %>% summarise(imdb_score)
imdb %>% group_by(imdb_score) %>% summarise(mean(imdb_score))
imdb %>% group_by(imdb_score) %>% summarise(count(imdb_score))
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7) %>% count(imdb_score)
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 8) %>% count(imdb_score)
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7 & imdb_score < 9) %>% count(imdb_score)
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.1) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7 & imdb_score < 9) %>% count(imdb_score)
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.1) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score)
imdb %>% group_by(imdb_score,director_name) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score)
imdb %>% group_by(imdb_score,num_critic_for_reviews) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score)
imdb %>% group_by(imdb_score,director_name) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score)
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score)
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score) %>% arrange(n)
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score) %>% arrange(desc(n))
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(number_of_movies = imdb_score) %>% arrange(desc(number_of_movies))
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(number_of_movies = imdb_score) %>% arrange(desc(n))
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(n) %>% arrange(desc(n))
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5 & imdb_score < 9) %>% count(imdb_score) %>% arrange(desc(n))
imdb %>% group_by(imdb_score) %>% filter(imdb_score > 7.5) %>% count(imdb_score) %>% arrange(desc(n))
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
## stat_bin(aes(y=..count.., label=..count..), geom="text", vjust=-.1) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
ggplot(aes(x=imdb_score), data = imdb) +
geom_histogram(binwidth = 0.2,aes(fill = ..count..)) +
scale_x_continuous(breaks = 0:10) +
ggtitle("Imdb Score Distribution") +
labs(x = "Imdb Score Distribution", y = "Number of Movies")
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(avgscore = mean(imdb_score), num = n()) %>%
ggplot(aes(x=avgscore, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(avgscore = mean(imdb_score), num = n()) %>%
ggplot(aes(x=mean_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(avgscore = mean(imdb_score), num = n()) %>%
ggplot(aes(x=avg_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
imdb %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
```{r visualizing, warning=FALSE, include=TRUE}
```{r visualizing, warning=FALSE, include=FALSE}
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
```{r visualizing, warning=FALSE, include=FALSE, message=FALSE}
```{r visualizing, warning=FALSE, include=FALSE}
TRUE
```{r visualizing, warning=FALSE, include=FALSE}
imdb %>% group_by(content_rating) %>%
+   filter(!is.na(content_rating)) %>%
+   summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
+   ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
+   geom_point() +
+   geom_label_repel()
IMDB <- read.csv("IMDM_ratings.csv")
imdb %>% group_by(content_rating) %>%
+   filter(!is.na(content_rating)) %>%
+   summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
+   ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
+   geom_point() +
+   geom_label_repel()
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(avg_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=avg_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
```{r visualizing, warning = FALSE, include = FALSE}
```{r visualizing, warning=FALSE, include=FALSE}
imdb %>% group_by(content_rating) %>%
filter(!is.na(content_rating)) %>%
summarise(average_imdb_score = mean(imdb_score), num = n()) %>%
ggplot(aes(x=average_imdb_score, y = num, label = content_rating)) +
geom_point() +
geom_label_repel()
