current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
print(paste0("Net Profit is $", round(simulations_profit,2), " which is average + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
# mean net profit
simulations_profit/10000
# mean net profit
simulations_profit/10000
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
mean_profit <- 0
buying_price <- 100
simulations_profit <- 0
current_profit <- 0
sell_below_90 <- 90
sell_above_120 <- 120
for(m in 1:10000){
stock <- stock_price()
for (stock_cost in stock[1:30]) {
if (stock_cost <= 90 || stock_cost >= 120 || stock_cost == 30){
current_profit <- stock_cost - buying_price
break
}
}
simulations_profit <- simulations_profit + current_profit
}
# mean net profit
simulations_profit/10000
print(paste0("Net Profit is $", round(simulations_profit,2), " which is ~ + $2.26 in every iteration"))
library(tidyverse)
library(diamonds)
diamonds2
diamonds2
diamonds
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
diamonds2_train <- slice(diamonds2, 1:43152)
diamonds2_test <- slice(diamonds2,43153:)
diamonds2_test <- slice(diamonds2,43153:53940)
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds2)
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds2_train)
mod_diamond3 <- lm(depth+table+x+y+z+lcarat+color+cut+clarity,data=diamonds2_train)
diamonds2_train
mod_diamond3 <- lm(depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds2_train)
mod_diamond3 <- lm(lprice ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds2_train)
library(tidyverse)
library(modelr)
library(rpart)
library(randomForest)
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
diamonds2
# 1)
# Splitting the data into test and train
diamonds_train_indices <- sample(1:nrow(diamonds2),0.8*nrow(diamonds2))
diamonds_train <- diamonds2 %>% slice(diamonds_train_indices)
diamonds_test <- diamonds2 %>% slice(-diamonds_train_indices)
# Fit the mod_diamonds2 on diamonds2_train
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds_train)
# Fit the mod_diamonds3 on diamonds2_train
mod_diamond3 <- lm(lprice ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds_train)
## add predictions to mod_diamond 2 and 3
######################################### INVERT THE LOG ###################################################
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond2, "pred2")
rmse(mod_diamond2,diamonds_test) # 0.1925
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond3, "pred3") %>% mutate(pred_price = pred3^2)
sqrt(mean((diamonds2_test$price - diamonds2_test$pred2)^2))
## add predictions to mod_diamond 2 and 3
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond2, "pred2") %>% mutate(pred_price = pred2^2)
sqrt(mean((diamonds2_test$price - diamonds2_test$pred2)^2))
rmse(mod_diamond2,diamonds_test) # 0.1925
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond3, "pred3") %>% mutate(pred_price = pred3^2)
rmse(mod_diamond3,diamonds_test) #0.1915
rmse(model_dia_2,diamonds_test) # 0.1911
## add predictions to mod_diamond 2 and 3
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond2, "pred2") %>% mutate(pred_price = pred2^2) %>% rmse(mod_diamond2,diamonds_test) # 0.1911
## add predictions to mod_diamond 2 and 3
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond2, "pred2") %>% mutate(pred_price = pred2^2) %>% rmse(diamonds2,diamonds_test) # 0.1911
# Fit the mod_diamonds2 on diamonds_train
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds_train)
# Fit the mod_diamonds3 on diamonds_train
mod_diamond3 <- lm(lprice ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds_train)
## add predictions to mod_diamond 2 and 3
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond2, "pred2") %>% mutate(pred_price = pred2^2)
rmse(mod_diamond2,diamonds_test) # 0.1911
mod_diamond2
diamonds2
model_dia_2
sqrt(mean((model_dia_2$price - model_dia_2$pred_price)^2))
rmse(mod_diamond2,model_dia_2) # 0.1911
rmse(model_dia_2,diamonds_test) # 0.1911
model_dia_3 <- diamonds2 %>%
add_predictions(mod_diamond3, "pred3") %>% mutate(pred_price = pred3^2)
# rmse
sqrt(mean((model_dia_3$price - model_dia_3$pred_price)^2))
# random forest model on the same formula as the other trees
mod_diamond_rf <- randomForest(price ~ depth + table + x + y + z + lcarat + color + cut + clarity,
data = diamonds2, ntree = 200,
importance = TRUE, do.trace = 10)
# clarity > color > depth > cut > carat
importance(mod_diamond_rf)[order(importance(mod_diamond_rf)[,1], decreasing = TRUE),]
# random forest model on the same formula as the other trees
mod_diamond_rf <- randomForest(price ~ depth + table + x + y + z + lcarat + color + cut + clarity,
data = diamonds_train, ntree = 200,
importance = TRUE, do.trace = 10)
importance(mod_diamond_rf)[order(importance(mod_diamond_rf)[,1], decreasing = TRUE),]
# As the model gets more complicated the rmse increases because it is overfitting
rmse(regression_mod,diamonds2_test) ## 828.63
# Fit a regression tree using rpart
(regression_mod <- rpart(price ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds_train))
# lcarat and y are the most important, with color being the least important
summary(regression_mod)
# As the model gets more complicated the rmse increases because it is overfitting
rmse(regression_mod,diamonds2_test) ## 828.63
# rmse
sqrt(mean((model_dia_3$price - model_dia_3$pred_price)^2))
library(tidyverse)
library(modelr)
library(rpart)
library(randomForest)
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
# Splitting the data into test and train
diamonds_train_indices <- sample(1:nrow(diamonds2),0.8*nrow(diamonds2))
diamonds_train <- diamonds2 %>% slice(diamonds_train_indices)
diamonds_test <- diamonds2 %>% slice(-diamonds_train_indices)
# Fit the mod_diamonds2 on diamonds_train
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds_train)
# Fit the mod_diamonds3 on diamonds_train
mod_diamond3 <- lm(lprice ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds_train)
## add predictions to mod_diamond 2 and 3
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond2, "pred2") %>% mutate(pred_price = pred2^2)
# rmse
sqrt(mean((model_dia_2$price - model_dia_2$pred_price)^2))
# Fit a regression tree using rpart
(regression_mod <- rpart(price ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds_train))
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
# 1)
# Splitting the data into test and train
diamonds_train_indices <- sample(1:nrow(diamonds2),0.8*nrow(diamonds2))
diamonds_train <- diamonds2 %>% slice(diamonds_train_indices)
diamonds_test <- diamonds2 %>% slice(-diamonds_train_indices)
# Fit the mod_diamonds2 on diamonds_train
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds_train)
# Fit the mod_diamonds3 on diamonds_train
mod_diamond3 <- lm(lprice ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds_train)
## add predictions to mod_diamond 2 and 3
model_dia_2 <- diamonds2 %>%
add_predictions(mod_diamond2, "pred2") %>% mutate(pred_price = pred2^2)
# rmse
sqrt(mean((model_dia_2$price - model_dia_2$pred_price)^2))
model_dia_3 <- diamonds2 %>%
add_predictions(mod_diamond3, "pred3") %>% mutate(pred_price = pred3^2)
# rmse
sqrt(mean((model_dia_3$price - model_dia_3$pred_price)^2))
# 2)
# Fit a regression tree using rpart
(regression_mod <- rpart(price ~ depth + table + x + y + z + lcarat + color + cut + clarity,data=diamonds_train))
# lcarat and y are the most important, with color being the least important
summary(regression_mod)
# As the model gets more complicated the rmse increases because it is overfitting
rmse(regression_mod,diamonds2_test) ## ~ 828.63
# 3)
# As the model gets more complicated the rmse increases because it is overfitting
rmse(regression_mod,diamonds_test) ## ~ 828.63
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
setwd("~/")
IMDB <- read.csv("IMDM_ratings.csv")
setwd("~/Documents/Github/UberDataAnalysis")
IMDB <- read.csv("IMDM_ratings.csv")
sum(duplicated(IMDB))
imdb <- IMDB[!duplicated(IMDB), ]
str(imdb)
# 5043 rows abd 28 cols
dim(imdb)
# What are the missing values?
colSums(sapply(imdb, is.na))
# cleaning the movie title
imdb$movie_title <- gsub("Â", "", as.character(factor(imdb$movie_title)))
str_trim(imdb$movie_title, side = "right")
imdb <- imdb[!is.na(imdb$gross), ]
imdb <- imdb[!is.na(imdb$budget), ]
imdb <- imdb[!is.na(imdb$gross), ]
imdb <- imdb[!is.na(imdb$budget), ]
# Aspect Ratio has some missing values, which will not be important for our analysis.
imdb <- subset(imdb, select = -c(aspect_ratio))
imdb <- subset(imdb, select = -c(color))
## U.K , France and Canada had highest IMDB Average Rating
# Is language in this dataset?
table(imdb$language)
# Since most movies are in English, we can remove language.
imdb <- subset(imdb, select = -c(language))
# Adding Profit and ROI %
imdb <- imdb %>% mutate(net_profit = gross - budget,return_on_investment = (net_profit/budget)*100)
str(imdb$genres)
colSums(sapply(IMDB, is.na))
imdb <- imdb[!is.na(IMDB$gross), ]
imdb <- imdb[!is.na(IMDB$budget), ]
dim(imdb)
# replacing all NA's of aspect ratio to 0
imdb$aspect_ratio[is.na(imdb$aspect_ratio)] <- 0
# replacing all NA's of aspect ratio to 0
imdb$aspect_ratio[is.na(imdb$aspect_ratio)]<- 0
# replacing all NA's of aspect ratio to 0
imdb$aspect_ratio[is.na(imdb$aspect_ratio)] <- 0
library(readr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(stringr)
## Predicting new user booking.
IMDB <- read.csv("IMDM_ratings.csv")
sum(duplicated(IMDB))
imdb <- IMDB[!duplicated(IMDB), ]
str(imdb)
# 5043 rows abd 28 cols
dim(imdb)
# What are the missing values?
colSums(sapply(imdb, is.na))
# cleaning the movie title
imdb$movie_title <- gsub("Â", "", as.character(factor(imdb$movie_title)))
str_trim(imdb$movie_title, side = "right")
# Gross and Budget have many missing NA's as we would use these rows.
# We will remove the rows with NA's to make it optimal.
imdb <- imdb[!is.na(imdb$gross), ]
imdb <- imdb[!is.na(imdb$budget), ]
# Aspect Ratio has some missing values, which will not be important for our analysis.
imdb <- subset(imdb, select = -c(aspect_ratio))
imdb <- subset(imdb, select = -c(color))
## U.K , France and Canada had highest IMDB Average Rating
# Is language in this dataset?
table(imdb$language)
# Since most movies are in English, we can remove language.
imdb <- subset(imdb, select = -c(language))
# Adding Profit and ROI %
imdb <- imdb %>% mutate(net_profit = gross - budget,return_on_investment = (net_profit/budget)*100)
# replacing all NA's of aspect ratio to 0
imdb$aspect_ratio[is.na(imdb$aspect_ratio)] <- 0
# replacing all NA's of aspect ratio to 0
imdb$aspect_ratio
# replacing all NA's of aspect ratio to 0
str(imdb)
# replacing all NA's of aspect ratio to 0
imdb$facenumber_in_poster[is.na(imdb$facenumber_in_poster)] <- round(mean(imdb$facenumber_in_poster, na.rm = TRUE))
imdb[,c(5,6,8,13,24,26)][imdb[,c(5,6,8,13,24,26)] == 0] <- NA
imdb$num_critic_for_reviews[is.na(imdb$num_critic_for_reviews)] <- round(mean(imdb$num_critic_for_reviews, na.rm = TRUE))
imdb$duration[is.na(imdb$duration)] <- round(mean(imdb$duration, na.rm = TRUE))
imdb$director_facebook_likes[is.na(imdb$director_facebook_likes)] <- round(mean(imdb$director_facebook_likes, na.rm = TRUE))
imdb$actor_3_facebook_likes[is.na(imdb$actor_3_facebook_likes)] <- round(mean(imdb$actor_3_facebook_likes, na.rm = TRUE))
imdb$actor_1_facebook_likes[is.na(imdb$actor_1_facebook_likes)] <- round(mean(imdb$actor_1_facebook_likes, na.rm = TRUE))
imdb$cast_total_facebook_likes[is.na(imdb$cast_total_facebook_likes)] <- round(mean(imdb$cast_total_facebook_likes, na.rm = TRUE))
imdb$actor_2_facebook_likes[is.na(imdb$actor_2_facebook_likes)] <- round(mean(imdb$actor_2_facebook_likes, na.rm = TRUE))
imdb$movie_facebook_likes[is.na(imdb$movie_facebook_likes)] <- round(mean(imdb$movie_facebook_likes, na.rm = TRUE))
# delete the blank cols in content rating as they cannot be replaced with anything reasonable
imdb <- imdb[!(imdb$content_rating %in% ""),]
imdb$content_rating[imdb$content_rating == 'M']   <- 'PG'
imdb$content_rating[imdb$content_rating == 'GP']  <- 'PG'
imdb$content_rating[imdb$content_rating == 'X']   <- 'NC-17'
imdb$content_rating[imdb$content_rating == 'Approved']  <- 'R'
imdb$content_rating[imdb$content_rating == 'Not Rated'] <- 'R'
imdb$content_rating[imdb$content_rating == 'Passed']    <- 'R'
imdb$content_rating[imdb$content_rating == 'Unrated']   <- 'R'
imdb$content_rating <- factor(imdb$content_rating)
levels(imdb$country) <- c(levels(imdb$country), "Others")
levels(imdb$country) <- c(levels(imdb$country), "Others")
imdb$country[(imdb$country != 'USA')&(imdb$country != 'UK')] <- 'Others'
imdb$country <- factor(imdb$country)
table(imdb$country)
imdb$country[(imdb$country != 'USA')&(imdb$country != 'UK')] <- 'Others'
imdb$country <- factor(imdb$country)
table(imdb$country)
str(imdb)
# Data Visualizing
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(profit)) %>%
top_n(10, profit) %>%
ggplot(aes(x=budget/1000000, y=profit/1000000)) +
geom_point() +
geom_smooth() +
geom_text_repel(aes(label=movie_title)) +
labs(x = "Budget in million", y = "Profit in million", title = "Top 10 Profitable Movies") +
theme(plot.title = element_text(hjust = 0.5))
str(imbd)
str(imdb)
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(net_profit)) %>%
top_n(10, net_profit) %>%
ggplot(aes(x=budget/1000000, y=net_profit/1000000)) +
geom_point() +
geom_smooth() +
geom_text_repel(aes(label=movie_title)) +
labs(x = "Budget in million", y = "Profit in million", title = "Top 10 Profitable Movies") +
theme(plot.title = element_text(hjust = 0.5))
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(net_profit)) %>%
top_n(10, net_profit) %>%
ggplot(aes(x=budget/1000000, y=net_profit/1000000)) +
geom_point() +
geom_smooth() +
labs(x = "Budget in million", y = "Profit in million", title = "Top 10 Profitable Movies") +
theme(plot.title = element_text(hjust = 0.5))
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(net_profit)) %>%
top_n(10, net_profit) %>%
ggplot(aes(x=budget/1000000, y=net_profit/1000000)) +
geom_point() +
geom_smooth() +
geom_text_repel(aes(label=movie_title)) +
labs(x = "Budget in million", y = "Profit in million", title = "Budget of the top 10 profitable movies") +
theme(plot.title = element_text(hjust = 0.5))
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(net_profit)) %>%
top_n(10, net_profit) %>%
ggplot(aes(x=budget/1000000, y=net_profit/1000000)) +
geom_point() +
geom_smooth() +
geom_text_repel(aes(label=movie_title)) +
labs(x = "Budget in million", y = "Profit in million", title = "Budget of the top 10 profitable movies") +
theme(plot.title = element_text(hjust = 0.2))
imdb %>%
filter(title_year %in% c(2000:2016)) %>%
arrange(desc(net_profit)) %>%
top_n(10, net_profit) %>%
ggplot(aes(x=budget/1000000, y=net_profit/1000000)) +
geom_point() +
geom_smooth() +
geom_text_repel(aes(label=movie_title)) +
labs(x = "Budget in million", y = "Profit in million", title = "Budget of the top 10 profitable movies between 2000 - 2016") +
theme(plot.title = element_text(hjust = 0.2))
